<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TianTian的404私有库</title>
  
  <subtitle>一只有梦想会翻身的小咸鱼</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liutiantian233.github.io/"/>
  <updated>2019-01-27T15:35:55.679Z</updated>
  <id>https://liutiantian233.github.io/</id>
  
  <author>
    <name>TianTian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Primer第三周的笔记</title>
    <link href="https://liutiantian233.github.io/about-study-manual-C/2019/01/the-third-week-for-C++.html"/>
    <id>https://liutiantian233.github.io/about-study-manual-C/2019/01/the-third-week-for-C++.html</id>
    <published>2019-01-27T15:20:32.000Z</published>
    <updated>2019-01-27T15:35:55.679Z</updated>
    
    <summary type="html">
    
      这是基于C++ Primer的第三周笔记，主要内容为C++的函数和更多的程序类型。包括函数基础，参数传递，返回类型，复合类型，处理类型，引用和指针。详细请见C++ Primer的6.1节至6.3节，2.3节至2.5节。
    
    </summary>
    
      <category term="关于C++的学习手册" scheme="https://liutiantian233.github.io/categories/about-study-manual-C/"/>
    
    
      <category term="C++的开发和进度" scheme="https://liutiantian233.github.io/tags/C-development-and-progress/"/>
    
  </entry>
  
  <entry>
    <title>基于Primer第二周的笔记</title>
    <link href="https://liutiantian233.github.io/about-study-manual-C/2019/01/the-second-week-for-C++.html"/>
    <id>https://liutiantian233.github.io/about-study-manual-C/2019/01/the-second-week-for-C++.html</id>
    <published>2019-01-24T14:00:45.000Z</published>
    <updated>2019-01-26T22:18:26.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单语句"><a href="#简单语句" class="headerlink" title="简单语句"></a>简单语句</h1><p>通常情况下，语句都是按顺序执行，但除非是最简单的程序，不然仅仅执行顺序语句对于程序是远远不够的。所以C++语言提供了一组<strong>控制流（flow-of-control）</strong>语句以支持复杂的语句。</p><p>一个表达式末尾加上分号就变成了<strong>表达式语句（expression statement）</strong>。其作用是执行表达式并丢弃求值结果。</p><h2 id="空语句"><a href="#空语句" class="headerlink" title="空语句"></a>空语句</h2><p>最简单的语句就是<strong>空语句（null statement）</strong>，只含有一个分号。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;  <span class="comment">// 空语句</span></span><br></pre></td></tr></table></figure><p>空语句被用作于：<strong>语法上需要一条语句，但逻辑上不需要。</strong>一种常见的情况是，当循环的全部工作在条件部分就可以完成时，通常会用到空语句。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重复读如数据直至某次输入的值等于sought</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s &amp;&amp; s != sought)</span><br><span class="line">    ;  <span class="comment">// 空语句</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-2.png" alt=""></p><h2 id="别漏写分号，也别多写分号"><a href="#别漏写分号，也别多写分号" class="headerlink" title="别漏写分号，也别多写分号"></a>别漏写分号，也别多写分号</h2><p>因为空语句是一条语句，可以用在任何地方。由于这个原因，很多看起来是非法的语句，往往都是空语句。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v = v1 + v2;;  <span class="comment">// 正确：第二个分号表示一条多余的空语句</span></span><br></pre></td></tr></table></figure><p>一般来说空语句是无害的，但如果出现在 if 或者 while 之后，就会改变程序的初衷。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (iter != svec.end()) ;  <span class="comment">// 循环空语句</span></span><br><span class="line">    ++iter;</span><br></pre></td></tr></table></figure><p><strong>多余的空语句并非总是无害的</strong></p><h2 id="复合语句-块"><a href="#复合语句-块" class="headerlink" title="复合语句 / 块"></a>复合语句 / 块</h2><p><strong>复合语句（compound statement）</strong>是指用花括号括起来的语句和声明的序列。复合语句也被叫做<strong>块（block）</strong>。在块中引入的名字只能在块中内访问。</p><p>如果在程序中：<strong>语法上需要一条语句，但逻辑上需要多条语句。</strong>则应该使用复合语句。</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-3.png" alt=""></p><p>所谓空块，是指内部没有任何语句的一对花括号，空块作用等价于空语句。</p><h1 id="语句的作用域"><a href="#语句的作用域" class="headerlink" title="语句的作用域"></a>语句的作用域</h1><p>可以在 if，switch，while 和 for 语句的控制结构内定义变量。定义在控制结构内的变量只在相应语句的内部可见，一旦语句结束，变量也就超出其作用范围了。</p><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>C++语言提供了两种按条件执行的语句。一种是 if 语句，它根据条件决定控制流。另一种是 switch 语句，它计算一个整型表达式的值，然后根据这个值从几条执行路径中选择一条。</p><h2 id="if-语句（if-statement）"><a href="#if-语句（if-statement）" class="headerlink" title="if 语句（if statement）"></a>if 语句（if statement）</h2><p><strong>作用：判断一个指定的条件是否为真，根据判断结果决定是否执行另外一条语句。</strong></p><p>if 语句包含两种形式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    statement</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    statement</span><br></pre></td></tr></table></figure><p>其中 condition 必须使用圆括号括起来。condition 可以是一个表达式，也可以是一个初始化了的变量声明。但不管是表达式还是变量，其类型都必须能转化成布尔类型。</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-4.png" alt=""></p><h3 id="使用-if-else-语句"><a href="#使用-if-else-语句" class="headerlink" title="使用 if else 语句"></a>使用 if else 语句</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; scores = &#123;<span class="string">"F"</span>, <span class="string">"D"</span>, <span class="string">"C"</span>, <span class="string">"B"</span>, <span class="string">"A"</span>, <span class="string">"A++"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 grade 小于60 对应的字母是 F 否则计算其下标</span></span><br><span class="line"><span class="built_in">string</span> = letter;</span><br><span class="line"><span class="keyword">if</span> (grade &lt; <span class="number">60</span>)</span><br><span class="line">    letter = scores[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    letter = scores[(grade - <span class="number">50</span>) / <span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="嵌套-if-语句"><a href="#嵌套-if-语句" class="headerlink" title="嵌套 if 语句"></a>嵌套 if 语句</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (grade % <span class="number">10</span> &gt; <span class="number">7</span>)</span><br><span class="line">    letter += <span class="string">'+'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (grade % <span class="number">10</span> &lt; <span class="number">3</span>)</span><br><span class="line">    letter += <span class="string">'-'</span>;</span><br></pre></td></tr></table></figure><h3 id="注意使用花括号"><a href="#注意使用花括号" class="headerlink" title="注意使用花括号"></a>注意使用花括号</h3><p>有一种常见的错误：<strong>本来程序中有几条语句应该作为一个块来执行，但是我们忘了用花括号把这些语句包围。</strong>这会违背程序的初衷。</p><p>为了避免此类问题，有些代码风格要求在 if 或者 else 之后必须写上花括号（对 while 和 for 语句也有同样的要求）这么做的好处是可以避免代码混乱不清，以后修改代码时如果想添加别的语句，也可以很容易的找到正确的位置。</p><h3 id="垂悬-else"><a href="#垂悬-else" class="headerlink" title="垂悬 else"></a>垂悬 else</h3><p>当一个 if 语句嵌套在另一个 if 语句内部时，很可能 if 分支会多于 else 分支。事实上，这时候问题出现了：<strong>怎么知道某个给定的 else 是和哪个 if 匹配呢？</strong></p><p>这个问题通常称作<strong>悬垂 else（dangling else）</strong>，对于这个问题不同的语言有着不同的解决方式，对于C++而言，它规定 else 与离它最近的尚未匹配的 if 匹配，从而消除了程序的二义性。</p><h3 id="使用花括号控制执行路径"><a href="#使用花括号控制执行路径" class="headerlink" title="使用花括号控制执行路径"></a>使用花括号控制执行路径</h3><p>要想使 else 分支和外层的 if 语句匹配，可以在内层 if 语句的两端加上花括号，使其成为一个块。</p><h2 id="switch-语句（switch-statement）"><a href="#switch-语句（switch-statement）" class="headerlink" title="switch 语句（switch statement）"></a>switch 语句（switch statement）</h2><p>此语句提供了一条便利的途径使得我们能够在若干固定选项中做出选择。</p><p>举个例子，统计五个元音字母在一篇文章中出现的次数，程序逻辑应该是：</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-5.jpg" alt=""></p><p>switch 语句首先对括号里的表达式求值，该表达式紧跟在关键词 switch 的后面，可以是一个初始化的变量声明。表达式的值转换成整数类型，然后与每个 case 标签的值比较。</p><p>如果表达式和某个 case 标签的值匹配成功，程序从该标签之后的第一条语句开始执行，直到到达了 switch 的结尾或者遇到一条 break 语句为止。</p><p>如果 switch 语句的表达式和所有 case 都没有匹配上，将直接跳转到 switch 结构之后的第一条语句。</p><p>case 关键字和它对应的值一起被称为 <strong>case 标签（case label）</strong>。case 标签必须是整型常量表达式。</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-6.png" alt=""></p><p>任何两个 case 标签的值不能相同，否则就会引发错误。另外，default 也是一种特殊的 case 标签。</p><h3 id="switch-内部的控制流"><a href="#switch-内部的控制流" class="headerlink" title="switch 内部的控制流"></a>switch 内部的控制流</h3><p>理解程序在 case 标签之间的执行流程非常重要。如果某个 case 标签匹配成功，将从该标签开始往后顺序执行所有 case 分支，除非程序显式的中断了这一过程，否则直到 switch 的结尾处才会停下。要想避免执行后续的 case 分支代码，我们必须显式的告诉编译器终止执行过程。</p><p>大多数情况下，在下一个 case 标签之前应该有一条 break 语句。</p><p>然而，也有一些时候默认的 switch 行为才是程序真正需要的。每个 case 标签只能对应一个值，但是有时候我们希望两个或者更多个值共享同一组操作。此时，我们就故意省略 break 语句，使得程序能够连续执行若干个 case 标签。</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-7.png" alt=""></p><p>C++程序的形式比较自由，所以 case 标签之后不一定非得换行。把几个 case 标签写在一行里，强调这些 case 代表的是某个范围内的值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'a'</span>: <span class="keyword">case</span> <span class="string">'e'</span>: <span class="keyword">case</span> <span class="string">'i'</span>: <span class="keyword">case</span> <span class="string">'o'</span>: <span class="keyword">case</span> <span class="string">'u'</span>:</span><br><span class="line">        ++count;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-8.png" alt=""></p><h3 id="漏写-break-容易引发缺陷"><a href="#漏写-break-容易引发缺陷" class="headerlink" title="漏写 break 容易引发缺陷"></a>漏写 break 容易引发缺陷</h3><p>有一种常见的错觉是程序只执行匹配成功的那个 case 分支的语句。例如，下面程序的统计结果是错误的：</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-9.png" alt=""></p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-10.png" alt=""></p><h3 id="default-标签"><a href="#default-标签" class="headerlink" title="default 标签"></a>default 标签</h3><p>如果没有任何一个 case 标签可以匹配上 switch 表达式的值，程序将执行紧跟在<strong>default 标签（default label）</strong>后面的语句。</p><p>例如，可以增加一个计数值来统计非元音字母的数量，只要在 default 分支内不断递增变量就可以了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'a'</span>: <span class="keyword">case</span> <span class="string">'e'</span>: <span class="keyword">case</span> <span class="string">'i'</span>: <span class="keyword">case</span> <span class="string">'o'</span>: <span class="keyword">case</span> <span class="string">'u'</span>:</span><br><span class="line">        ++count;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ++other;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-11.png" alt=""></p><h3 id="switch-内部的变量定义"><a href="#switch-内部的变量定义" class="headerlink" title="switch 内部的变量定义"></a>switch 内部的变量定义</h3><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-12.png" alt=""></p><h1 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h1><p>迭代语句通常称为循环语句，它重复执行操作直到满足某个条件。while 和 for 语句在执行循环体之前检查条件，do while 语句先执行循环体，然后再检查条件。</p><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><p>只要条件为<strong>真</strong>，<strong>while 语句（while statement）</strong>就重复执行循环体，它的语法形式是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure><p>在 while 结构中，只要 condition 的求值结果为真就一直执行 statement （常常是一个块）。condition 不能为空，如果 condition 第一次求值就是<strong>false</strong>，则 statement 一次都不执行。</p><p>while 的条件部分可以是一个表达式或者是一个带初始化的变量声明。通常来说，应该由条件本身或者是循环体设法改变表达式的值，否则循环可能无法终止。</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-13.png" alt=""></p><h3 id="使用-while-循环"><a href="#使用-while-循环" class="headerlink" title="使用 while 循环"></a>使用 while 循环</h3><p>当不确定到底要迭代多少次时，使用 while 循环比较合适，比如读取输入的内容就是如此。还有一种情况也应该使用 while 循环，这就是我们想在循环结束后访问循环控制变量。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">// 重复读入数据，直至到达文件末尾或者遇到其他输入问题</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; i)</span><br><span class="line">    v.push_back(i);</span><br><span class="line"><span class="comment">// 寻找第一个负值元素</span></span><br><span class="line"><span class="keyword">auto</span> beg = v.begin();</span><br><span class="line"><span class="keyword">while</span> (beg != v.end() &amp;&amp; *beg &gt;= <span class="number">0</span>)</span><br><span class="line">    ++beg;</span><br><span class="line"><span class="keyword">if</span> (beg == v.end())</span><br><span class="line">    <span class="comment">// 此时我们知道 v 中的所有元素都大于等于0</span></span><br></pre></td></tr></table></figure><p>第一个循环从标准输入中读取数据，我们一开始不清楚循环要执行多少次，当 cin 读取到无效数据，遇到其他一些输入错误或是到达文件末尾时循环条件失效。</p><p>第二个循环重复执行直到遇到一个负值为止，循环终止后，beg 等于 v.end()，或者指向 v 中一个小于 0 的元素。可以在 while 循环外继续使用 beg 的状态以进行其他处理。</p><h2 id="传统的-for-语句"><a href="#传统的-for-语句" class="headerlink" title="传统的 for 语句"></a>传统的 for 语句</h2><p><strong>for 语句</strong>的语法形式是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (init-statement; condition; expression)</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure><p><strong>关键字 for 及括号里的部分称作 for 语句头。</strong></p><p>init-statement 必须是以下三种形式中的一种：</p><ul><li>声明语句</li><li>表达式语句</li><li>空语句</li></ul><p>因为这些语句都以分号作为结束，所以 for 语句的语法形式也可以是这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initializer; condition; expression)</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure><p>一般情况下，init-statement 负责初始化一个值，这个值将随着循环的进行而改变。condition 作为循环控制的条件，只要 condition 为真，就执行一次 statement。如果 condition 第一次的求值结果就是 false，则 statement 一次也不会执行。expression 负责修改 init-statement 初始化的变量，这个变量正好就是 condition 检查的对象，修改发生在每次循环迭代之后。statement 可以是一条单独的语句也可以是一条复合语句。</p><h3 id="传统-for-循环的执行流程"><a href="#传统-for-循环的执行流程" class="headerlink" title="传统 for 循环的执行流程"></a>传统 for 循环的执行流程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重复处理 s 中的字符直至我们处理完全部字符或者遇到了一个表示空白的字符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">decltype</span>(s.size()) index = <span class="number">0</span>; index != s.size() &amp;&amp; !<span class="built_in">isspace</span>(s[index]); ++index)</span><br><span class="line">    s[index] = <span class="built_in">toupper</span>(s[index]);  <span class="comment">// 将当前字符改写成大写形式</span></span><br></pre></td></tr></table></figure><p>求值的顺序如下所示：</p><ol><li>循环开始时，首先执行一次 init-statement。此例子中，定义 index 并初始化为 0 。</li><li>接下来判断 condition。如果 index 不等于 s.size() 而且在 s[index] 位置的字符不是空白，则执行 for 循环体的内容。否则，循环终止。如果第一次迭代时条件就为假，for 循环体一次也不会执行。</li><li>如果条件为真，执行循环体。此例中，for 循环体将 s[index] 位置的字符改写成大写形式。</li><li>最后执行 expression。此例中，将 index 的值加 1 。</li></ol><p>这 4 步说明了 for 循环第一次迭代的过程。</p><p>其中第 1 步只在循环开始时执行一次，第 2 3 4 步重复执行直到条件为假时终止，也就是在 s 中遇到一个空白字符或者 index 等于 s.size() 时终止。</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-14.png" alt=""></p><h3 id="for-语句头中的多重定义"><a href="#for-语句头中的多重定义" class="headerlink" title="for 语句头中的多重定义"></a>for 语句头中的多重定义</h3><p>和其他的声明一样，init-statement 也可以定义多个对象。但是 init-statement 只能有一条声明语句，因此，所有变量的基础类型必须相同。</p><p>举个例子，我们用下面的循环把 vector 的元素拷贝一份添加到原来的元素后面：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录下 v 的大小，当到达原来的最后一个元素后结束循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">decltype</span>(v.size()) i = <span class="number">0</span>, sz = v.size(); i != sz; ++i)</span><br><span class="line">    v.push_back(v[i]);</span><br></pre></td></tr></table></figure><p>在这个循环中，我们在 init-statement 里同时定义了索引 i 和循环控制变量 sz。</p><h3 id="省略-for-语句头的某些部分"><a href="#省略-for-语句头的某些部分" class="headerlink" title="省略 for 语句头的某些部分"></a>省略 for 语句头的某些部分</h3><p>for 语句头能省略掉 init-statement，condition 和 expression 中的任何一个（或者全部）。</p><p>如果不需要初始化，则我们可以使用一条空语句作为 init-statement。例如，对于在 vector 对象中寻找第一个负数的程序，完全可以用 for 循环改写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> beg = v.begin();</span><br><span class="line"><span class="keyword">for</span> ( <span class="comment">/*空语句*/</span> ; beg != v.end() &amp;&amp; *beg &gt;= <span class="number">0</span>; ++beg)</span><br><span class="line">    ;  <span class="comment">// 什么都不做</span></span><br></pre></td></tr></table></figure><p>注意：<strong>分号必须保留以表明我们省略掉了 init-statement。</strong></p><p>说得更准确一点，分号表示的是一个空的 init-statement。在这个循环中，因为所有要做的工作都在 for 语句头的条件和表达式部分完成了，所以 for 循环体也是空的。其中，条件部分决定何时停止查找，表达式部分递增迭代器。</p><p>省略 condition 的效果等价于在条件部分写了一个 true。因为条件的值永远是 true，所以在循环体内必须有语句负责退出循环，否则循环就会无休止地执行下去：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">/*条件为空*/</span> ; ++i) &#123;</span><br><span class="line">    <span class="comment">// 对 i 进行处理，循环内部的代码必须负责终止迭代过程！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以省略掉 for 语句头中的 expression，但是在这样的循环中就要求条件部分或者循环体必须改变迭代变量的值。</p><p>举个例子，之前有一个将整数读入 vector 的 while 循环，我们使用 for 语句改写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i; <span class="built_in">cin</span> &gt;&gt; i; <span class="comment">/*表达式为空*/</span> )</span><br><span class="line">    v.push_back(i);</span><br></pre></td></tr></table></figure><p>因为条件部分能改变 i 的值，所以这个循环不需要表达式部分。其中，条件部分不断检查输入流的内容，只要读取完所有的输入或者遇到一个输入错误就终止循环。</p><h2 id="do-while-语句（do-while-statement）"><a href="#do-while-语句（do-while-statement）" class="headerlink" title="do while 语句（do while statement）"></a>do while 语句（do while statement）</h2><p>do while 语句和 while 语句十分相似，唯一的区别就是，do while 语句先执行循环体后检查条件。不管条件的值如何，我们都至少执行一次循环。do while 语句的语法形式如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    statement</span><br><span class="line"><span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-15.png" alt=""></p><p>在 do 语句中，求 condition 的值之前首先执行一次 statement，condition 不能为空。</p><p>如果 condition 的值为假，循环终止，否则，重复循环过程。condition 使用的变量必须定义在循环体之外。</p><p>我们可以使用 do while 循环（不断地）执行加法运算：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不断提示用户输入一对数，然后求其和</span></span><br><span class="line"><span class="built_in">string</span> rsp;  <span class="comment">// 作为循环的条件，不能定义在 do 内部</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"please enter two values: "</span>;</span><br><span class="line">    <span class="keyword">int</span> val1 = <span class="number">0</span>, val2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; val1 &gt;&gt; val2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The sum of "</span> &lt;&lt; val1 &lt;&lt; <span class="string">" and "</span> &lt;&lt; val2 &lt;&lt; <span class="string">" = "</span> &lt;&lt; val1 + val2 &lt;&lt; <span class="string">"\n\n"</span> &lt;&lt; <span class="string">"More? Enter yes or no: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; rsp;</span><br><span class="line">&#125; <span class="keyword">while</span> (!rsp.empty() &amp;&amp; rsp[<span class="number">0</span>] != <span class="string">'n'</span>);</span><br></pre></td></tr></table></figure><p>循环首先提示用户输入两个数字，然后输出和并询问是否继续。条件部分检查用户的回答，如果用户没有回答，或者用户的回答以字母 n 开始，循环都将终止。否则循环继续执行。</p><p>因为对于 do while 来说先执行语句或者块，后判断条件，所以不允许在条件部分定义变量，如果允许，则变量的使用出现在定义之前，这显然是不合常理的！</p><h1 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h1><p>跳转语句中断当前的执行过程。C++语言提供了 4 种跳转语句：break，continue，goto 和 return。此笔记暂时记录前三种跳转语句。</p><h2 id="break-语句（break-statement）"><a href="#break-语句（break-statement）" class="headerlink" title="break 语句（break statement）"></a>break 语句（break statement）</h2><p><strong>break 语句</strong>负责终止离它最近的 while，do while，for 或 switch 语句，并从这些语句之后的第一条语句开始继续执行。</p><p>break 语句只能出现在迭代语句或者 switch 语句内部（包括嵌套在此类循环里的语句或块的内部）。break 语句的作用范围仅限于最近的循环或者 switch。</p><h2 id="continue-语句（continue-statement）"><a href="#continue-语句（continue-statement）" class="headerlink" title="continue 语句（continue statement）"></a>continue 语句（continue statement）</h2><p><strong>continue 语句</strong>终止最近的循环中的当前迭代并立即开始下一次迭代。continue 语句只能出现在 for，while 和 do while 循环的内部，或者嵌套在此类循环里的语句或块的内部。</p><ul><li>和 break 语句类似的是：出现在嵌套循环中的 continue 语句也仅作用于离它最近的循环。</li><li>和 break 语句不同的是：只有当 switch 语句嵌套在迭代语句内部时，才能在 switch 里使用 continue。</li></ul><p>continue 语句中断当前的迭代，但是仍然继续执行循环。</p><ul><li>对于 while 或者 do while 语句来说，继续判断条件的值。</li><li>对于传统的 for 循环来说，继续执行 for 语句头的 expression。</li><li>对于范围 for 语句来说，则是用序列中的下一个元素初始化循环控制变量。</li></ul><h2 id="goto-语句（goto-statement）"><a href="#goto-语句（goto-statement）" class="headerlink" title="goto 语句（goto statement）"></a>goto 语句（goto statement）</h2><p><strong>goto 语句</strong>的作用是从 goto 语句无条件跳转到同一函数内的另一条语句。</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-16.png" alt=""></p><p>goto 语句的语法形式是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">goto</span> label;</span><br></pre></td></tr></table></figure><p>其中，label 是用于标记和识别一条语句的标示符。<strong>带标签语句（labeled statement）</strong>是一种特殊的语句，在它之前有一个标示符以及一个冒号：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">end: <span class="keyword">return</span>;  <span class="comment">// 带标签语句，可以作为 goto 目标</span></span><br></pre></td></tr></table></figure><p>标签标示符独立于变量或其他标示符的名字，因此，标签标示符可以和程序中其他实体的标示符使用同一个名字而不会相互干扰。goto 语句和控制权转向的那条带标签的语句必须位于同一个函数之内。</p><p>和 switch 语句类似，goto 语句也不能将程序的控制权从变量的作用域之外转移到作用域之内：</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/second-week-17.png" alt=""></p><p>向后跳过一个已经执行的定义是合法的。跳回到变量定义之前意味着系统将销毁该变量，然后重新创建它：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向后跳过一个带初始化的变量定义是合法的</span></span><br><span class="line">begin:</span><br><span class="line">    <span class="keyword">int</span> sz = get_size();</span><br><span class="line">    <span class="keyword">if</span> (sz &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> begin;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，goto 语句执行后将销毁 sz。因为跳回到 begin 的动作跨过了 sz 的定义语句，所以 sz 将重新定义并初始化。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://zh.cppreference.com/w/首页" target="_blank" rel="noopener">来自官方手册</a></p><p>C++ Primer中文译本（由于文件过大，需自行下载或<a href="https://liutiantian233.github.io/about/">联系我</a>）</p>]]></content>
    
    <summary type="html">
    
      这是基于C++ Primer的第二周笔记，主要内容为C++的控制语句。包括简单语句，条件语句，迭代语句和跳转语句。详细请见C++ Primer的5.1节至5.5节，跳过5.4.3节。
    
    </summary>
    
      <category term="关于C++的学习手册" scheme="https://liutiantian233.github.io/categories/about-study-manual-C/"/>
    
    
      <category term="C++的开发和进度" scheme="https://liutiantian233.github.io/tags/C-development-and-progress/"/>
    
  </entry>
  
  <entry>
    <title>基于Primer第一周的笔记</title>
    <link href="https://liutiantian233.github.io/about-study-manual-C/2019/01/the-first-week-for-C++.html"/>
    <id>https://liutiantian233.github.io/about-study-manual-C/2019/01/the-first-week-for-C++.html</id>
    <published>2019-01-20T19:10:48.000Z</published>
    <updated>2019-01-21T16:52:10.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一个Hello-World"><a href="#第一个Hello-World" class="headerlink" title="第一个Hello World"></a>第一个<code>Hello World</code></h1><p>都说程序员写毛笔字都是提笔就是Hello World，那么C++的第一个程序介绍也从这里开始吧！</p><p>C++的基本构造是从函数（function）开始，其中必有一个main函数，所以C++的基本模版如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的main必定属于int类型，所以需要int进行调用和命名。return为最基本的返回项，可有可无，特定情况下仅仅为保留结果和显示。</p><p><strong>重点：每一句结尾都得有一个 ; 这可能会经常被遗忘！</strong></p><p>关于C++的编译和运行，详情可见<a href="https://liutiantian233.github.io/tech/2019/01/mac-cpp-environment.html">C++的最佳环境</a></p><h1 id="C-的输入和输出"><a href="#C-的输入和输出" class="headerlink" title="C++的输入和输出"></a>C++的输入和输出</h1><p>C++与Python不同的是没有内置最基本的 I/O 语句，采用的是STL库（standard library）来进行 I/O 输入和输出。其中最基本的<strong>标准输入</strong>和<strong>标准输出</strong>分别为<strong>cin</strong>和<strong>cout</strong>。当然标准库里还有两个基本语句<strong>cerr</strong>和<strong>clog</strong>分别为错误和警告。</p><h2 id="一个标准程序"><a href="#一个标准程序" class="headerlink" title="一个标准程序"></a>一个标准程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行就是调用C++的基础STL标准库，俗称头文件。</p><h2 id="输出数据"><a href="#输出数据" class="headerlink" title="输出数据"></a>输出数据</h2><p>在main函数中的：</p><p><code>std::cout &lt;&lt; &quot;Hello World&quot; &lt;&lt; std::endl;</code></p><p><code>&lt;&lt;</code>叫做<strong>输出运算符</strong>，<code>endl</code>叫做<strong>操纵符</strong>，作用分别为输出和短暂缓冲数据。</p><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p>这里读取数据采用的是<code>cin</code>语句，通常为：</p><p><code>std::cin &gt;&gt; v1;</code></p><p><code>&gt;&gt;</code>叫做<strong>输入运算符</strong>，作用显而易见，作为输入数据。</p><h1 id="C-中注释的方法"><a href="#C-中注释的方法" class="headerlink" title="C++中注释的方法"></a>C++中注释的方法</h1><p>还记得2018年程序员界最火🔥的两大新闻吗，除了删库跑路，另一个就是同事不写注释，程序员暴走这条了。所以来说，任何程序都应该使用注释来使程序更加易读和易懂。</p><h2 id="C-注释的种类"><a href="#C-注释的种类" class="headerlink" title="C++注释的种类"></a>C++注释的种类</h2><p>C++有两种注释，分别为单行和多行注释。单行注释为双斜线开始（//）至此行结束，多行注释为（/*）开始，（*/）结束。</p><p>值得注意的是，多行注释无法嵌套注释，即：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 嵌套 /* 注释 */</span></span><br><span class="line"> * 是不可行的</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>C++中的数据类型包括<strong>算数类型</strong>（arithmetic type）和<strong>空类型</strong>（void），其中空类型不做任何具体的值。</p><h2 id="算数类型"><a href="#算数类型" class="headerlink" title="算数类型"></a>算数类型</h2><p>而算数类型又分为<strong>整型</strong>（包括字符和布尔）和<strong>浮点型</strong>。它们的数据尺寸如下：</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-2.png" alt=""></p><h2 id="类型转换（convert）"><a href="#类型转换（convert）" class="headerlink" title="类型转换（convert）"></a>类型转换（convert）</h2><p>顾名思义，这是一种强行将一种类型转换成另一种类型的转换。对于这种转换，在C++中也是允许合法的。比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> b = <span class="number">42</span>;     <span class="comment">// b 为 true</span></span><br><span class="line"><span class="keyword">int</span> i = b;       <span class="comment">// i 为 1</span></span><br><span class="line">i = <span class="number">3.14</span>;        <span class="comment">// i 为 3</span></span><br><span class="line"><span class="keyword">double</span> pi = i;   <span class="comment">// pi 为 3.0</span></span><br></pre></td></tr></table></figure><h2 id="字面值常量（literal）"><a href="#字面值常量（literal）" class="headerlink" title="字面值常量（literal）"></a>字面值常量（literal）</h2><p>每一个字面值常量都对应了一个数据类型，它们的形式和值决定了它们的数据类型。</p><h3 id="整型和浮点型字面值"><a href="#整型和浮点型字面值" class="headerlink" title="整型和浮点型字面值"></a>整型和浮点型字面值</h3><p>整型字面值可以写成十进制，八进制，十六进制等，0开头的整数为八进制，0x或者0X开头的为十六进制。我们可以用以下任意一种方法代表20：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>     <span class="comment">// 十进制</span></span><br><span class="line"><span class="number">024</span>    <span class="comment">// 八进制</span></span><br><span class="line"><span class="number">0x14</span>   <span class="comment">// 十六进制</span></span><br></pre></td></tr></table></figure><p>浮点型字面值一般表现为一个小数或者科学记数法表示的指数，其中指数使用E或者e。</p><h3 id="字符和字符串表示的字面值"><a href="#字符和字符串表示的字面值" class="headerlink" title="字符和字符串表示的字面值"></a>字符和字符串表示的字面值</h3><p>单引号为字符字面值，双引号为字符串字面值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span>        <span class="comment">// 字符字面值</span></span><br><span class="line"><span class="string">"Hello"</span>    <span class="comment">// 字符串字面值</span></span><br></pre></td></tr></table></figure><h3 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h3><p>一些情况下需要用到转义序列打印<strong>不可打印</strong>的符号，比如：</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-3.png" alt=""></p><h3 id="布尔字面值"><a href="#布尔字面值" class="headerlink" title="布尔字面值"></a>布尔字面值</h3><p>true 和 flase 是布尔类型的字面值。</p><h1 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h1><p>变量在C++中是一种存储类型，可参与运算。</p><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><p>首先是<strong>类型说明符（type specifier）</strong>，之后是一个或多个变量，逗号分隔，分号结束。</p><h3 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h3><p>当对象获得了一个特定的值，我们称之为对象被<strong>初始化（initialized）</strong>了。</p><p><strong>重点：C++中初始化和赋值是两个完全不同的操作！</strong></p><h3 id="列表初始化（list-initialization）"><a href="#列表初始化（list-initialization）" class="headerlink" title="列表初始化（list initialization）"></a>列表初始化（list initialization）</h3><p>C++有几种不同的初始化方式，如下，初始化变量 a 为 0：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>使用中括号初始化在C++11中全面应用。其中的特点是，如果初始化存在丢失数据的风险时，编译器会报错。</p><h3 id="默认初始化（default-initilized）"><a href="#默认初始化（default-initilized）" class="headerlink" title="默认初始化（default initilized）"></a>默认初始化（default initilized）</h3><p>默认值由变量类型决定！</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-4.png" alt=""></p><h2 id="变量声明和定义的关系"><a href="#变量声明和定义的关系" class="headerlink" title="变量声明和定义的关系"></a>变量声明和定义的关系</h2><p>C++允许<strong>分离式编译（separate compilation）</strong>机制，该机制运行原理为：将程序分隔为若干文件，每个文件可以被独立编译。</p><p>而为了支持分离式编译，C++将声明和定义区分开，<strong>声明（declaration）</strong>让程序所知，一个文件如果想使用别处定义的名字，必须包含对那个名字的声明，而<strong>定义（definition）</strong>负责创建与名字关联的实体。</p><p>如果想声明变量而不去定义，则添加关键词<code>extern</code>！</p><p><strong>注意：变量能且只能被定义一次，却可以被多次声明！</strong></p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-5.png" alt=""></p><h2 id="标识符（identifier）"><a href="#标识符（identifier）" class="headerlink" title="标识符（identifier）"></a>标识符（identifier）</h2><p>由字母数字和下划线组成，必须以字母和下划线开头，对大小写敏感。</p><p>如下表，C++本身使用的名字不可作为标识符。</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-6.png" alt=""></p><h3 id="一般性规则"><a href="#一般性规则" class="headerlink" title="一般性规则"></a>一般性规则</h3><p>以下规则提高可读性：</p><ul><li>体现实际含义</li><li>一般用小写字母</li><li>自定义的类名称一般大写字母开头</li><li>由多个单词组成需区分单词</li></ul><h2 id="名字的作用域（scope）"><a href="#名字的作用域（scope）" class="headerlink" title="名字的作用域（scope）"></a>名字的作用域（scope）</h2><p>不论在程序的什么位置，使用到的每一个名字都会指向一个实体。然而，同一个名字如果出现在程序不同的位置也可能是指向不同的实体。<strong>作用域</strong>一般都是以花括号分隔。</p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-7.png" alt=""></p><h3 id="嵌套的作用域"><a href="#嵌套的作用域" class="headerlink" title="嵌套的作用域"></a>嵌套的作用域</h3><p>作用域可以被彼此包含，<strong>内层作用域（inner scope）</strong>和<strong>外层作用域（outer scope）</strong>。作用域中一旦声明了某个名字，它所嵌套着的所有作用域中都能访问该名字。同时，允许在<strong>内层作用域</strong>中重新定义<strong>外层作用域</strong>已有的名字。</p><h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><p>表达式由一个或多个<strong>运算对象（operand）</strong>组成，对表达式求值将得到一个<strong>结果（result）</strong>。字面值和变量是最简单的<strong>表达式（expression）</strong>。把一个<strong>运算符（operator）</strong>和一个或多个运算对象组合就是复杂的表达式。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>C++定义了<strong>一元运算符（unary operator）</strong>和<strong>二元运算符（binary operator）</strong>。</p><h3 id="组合运算符和运算对象"><a href="#组合运算符和运算对象" class="headerlink" title="组合运算符和运算对象"></a>组合运算符和运算对象</h3><p>即运算对象的<strong>求值顺序（order of evaluation）</strong>包括<strong>优先级（precedence）</strong>和<strong>结合律（associativity）</strong>。</p><h3 id="运算对象转换"><a href="#运算对象转换" class="headerlink" title="运算对象转换"></a>运算对象转换</h3><p>详见<strong>算数转换</strong></p><h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><p>即自定义运算符。</p><h3 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h3><p>这是一个继承C语言中的概念，但是在C++中就不是那么容易理解的：</p><ul><li><strong>左值表达式</strong>的求值结果是一个对象或者是一个函数，然而以常量对象为代表的某些左值实际上不能作为赋值语句的左值运算对象。</li><li>虽然某些表达式的求值结果是对象，但它们是右值，非左值。</li></ul><p>做一个简单的归纳：<strong>当一个对象被用作右值的时候，用的是对象的值（内容）；当对象被用作左值的时候，用的是对象的身份（在内存中的位置）。</strong></p><p><strong>重点！！！</strong></p><h2 id="优先级和结合律"><a href="#优先级和结合律" class="headerlink" title="优先级和结合律"></a>优先级和结合律</h2><p>即<strong>复合表达式（compound expression）</strong>，<strong>括号无视优先级和结合律</strong>。</p><h2 id="求值顺序"><a href="#求值顺序" class="headerlink" title="求值顺序"></a>求值顺序</h2><p>优先级规定了运算对象的组合方式，但没有说明运算对象按照什么顺序求值。大多数情况下，不会明确指定求值的顺序。</p><p>其中有四种运算符规定了求值顺序，它们分别是<strong>逻辑与</strong>，<strong>逻辑或</strong>，<strong>条件运算符</strong>和<strong>逗号运算符</strong>。</p><h3 id="求值顺序和优先级结合律"><a href="#求值顺序和优先级结合律" class="headerlink" title="求值顺序和优先级结合律"></a>求值顺序和优先级结合律</h3><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-10.png" alt=""></p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-11.png" alt=""></p><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-8.png" alt=""></p><p>上表按照优先级排序，以上所有都满足左结合律，意味着当优先级相同时，从左向右顺序进行组合。<strong>算数运算符的运算对象和求值结果都是右值。</strong></p><h2 id="逻辑和关系运算符"><a href="#逻辑和关系运算符" class="headerlink" title="逻辑和关系运算符"></a>逻辑和关系运算符</h2><p><strong>逻辑和关系运算符的运算对象和求值结果都是右值。</strong></p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-9.png" alt=""></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><strong>赋值运算满足右结合律！赋值运算优先级较低！切勿混淆相等运算符和赋值运算符！</strong></p><h2 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h2><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-12.png" alt=""></p><h1 id="算数转换（arithmetic-conversion）"><a href="#算数转换（arithmetic-conversion）" class="headerlink" title="算数转换（arithmetic conversion）"></a>算数转换（arithmetic conversion）</h1><h2 id="整数提升"><a href="#整数提升" class="headerlink" title="整数提升"></a>整数提升</h2><p>负责把小整数类型提升至较大的整数类型。</p><h2 id="理解算数转换"><a href="#理解算数转换" class="headerlink" title="理解算数转换"></a>理解算数转换</h2><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-13.png" alt=""></p><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/first-week-14.png" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://zh.cppreference.com/w/首页" target="_blank" rel="noopener">来自官方手册</a></p><p>C++ Primer中文译本（由于文件过大，需自行下载或<a href="https://liutiantian233.github.io/about/">联系我</a>）</p>]]></content>
    
    <summary type="html">
    
      这是基于C++ Primer的第一周笔记，主要内容为C++的基本语句和逻辑运算，数据类型与基础表达式。详细请见C++ Primer的1.1节至1.3节，2.1节至2.2节，4.1节至4.5节和4.11.1节。
    
    </summary>
    
      <category term="关于C++的学习手册" scheme="https://liutiantian233.github.io/categories/about-study-manual-C/"/>
    
    
      <category term="C++的开发和进度" scheme="https://liutiantian233.github.io/tags/C-development-and-progress/"/>
    
  </entry>
  
  <entry>
    <title>关于CPP的学习手册</title>
    <link href="https://liutiantian233.github.io/about-study-manual-C/2019/01/about-cpp-study-manual.html"/>
    <id>https://liutiantian233.github.io/about-study-manual-C/2019/01/about-cpp-study-manual.html</id>
    <published>2019-01-19T00:40:35.000Z</published>
    <updated>2019-01-20T21:09:48.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="按照惯例-写在前面"><a href="#按照惯例-写在前面" class="headerlink" title="按照惯例 写在前面"></a>按照惯例 写在前面</h1><p>准确的说，这其实只能算是一个关于我学习C++过程中的检索与目录，我可不认为几篇简简单单的博客，就可以统筹概括完C++详细的知识点，越是经过深度的学习，越是发觉C++的强大，不可与同日的Python相比。</p><p>我记得在知乎上有人把C++和物理作类比，我很同意。理论物理是一场无尽的旅程，总有最前沿的东西。</p><blockquote><p>我从小就对物理感兴趣，于是我开始钻研物理，到现在，我早已是物理学博士，可我仍然不知道物理到底是什么。</p></blockquote><p>所以我的求知欲只能暂且到此为止，C++亦是如此！</p><p>到起草这篇博客开始，现在已经开学三周了。C++简单的皮毛也了解了一下，主要的程序和实验问题，我将会逐步更新至我的GitHub之上。</p><h1 id="目录与检索"><a href="#目录与检索" class="headerlink" title="目录与检索"></a>目录与检索</h1><p>看目录之前先讲个笑话：</p><blockquote><p>C语言说：我们提供标准外壳，零件和电子元件，您可以一个零件一个零件，亲手组装出任何机器。</p><p>Python说：我就像DIY爱好者的3D打印机一样，作为编程语言中真正的多面手，我们致力于让用户轻松地完成他们的工作。另外，我们也有巨量的套壳件，能让你用我们的方式使用友商的产品。不过，为了加工的方便，我们的作品一向是以塑料为主要材质的。所以请不要让它干太重的活，否则可能受不了如此沉重的折磨！</p><p>Go等其他语言：我们提供专门为某一类产品定制的集成模块，比如发动机，变速箱等等，您可以利用这些模块定制化特定种类的产品。</p><p>Java语言：我们是软件行业的蒸汽朋克，是工业时代的杰出代表。我们的产品一向以大负载，强功率著称，是你处理大量需求的不二选择。不过，请不要频繁地开关这些大家伙，因为那样的话你将浪费90%的燃料在预热机器上。</p><p>C++语言：我们提供这个世界上所有产品的集成模块，您可以快速地制作任何东西。相应地，我们还有一本长达1000页的产品说明，请务必仔细阅读，以免您不幸将飞机螺旋桨怼到潜水艇上。</p></blockquote><p>至于为什么要讲这个笑话，因为我想说：<strong>C++语言的野心非常大，但，你的野心不必这么大！</strong></p><p>并且随着大野心C++的逐步更新，一切教程语言都是会被改变，所以我推荐的第一个目录就在这里，<a href="https://zh.cppreference.com/w/首页" target="_blank" rel="noopener">中文的C++官方手册</a>，一切以官方为准。</p><ol><li>第零周：关于C++的入门<ol><li><a href="https://liutiantian233.github.io/tech/2019/01/mac-cpp-environment.html">对于环境的搭建与编译器的选择</a></li><li><a href="https://liutiantian233.github.io/about-study-manual-C/2019/01/the-first-week-for-C++.html">一个简单的C++程序</a></li></ol></li><li>第一周：变量类型与表达式，算数运算<ol><li><a href="https://liutiantian233.github.io/about-study-manual-C/2019/01/the-first-week-for-C++.html">论述部分</a></li><li>第一周的<a href="https://github.com/liutiantian233/CPP-Lab/tree/master/Lab01" target="_blank" rel="noopener">实验程序</a>和<a href="https://github.com/liutiantian233/CPP-Project/tree/master/Proj01" target="_blank" rel="noopener">项目</a></li></ol></li></ol><p>粗略地说，我的这篇开发手册将被划分为两个部分：</p><ul><li>学习C++和STL，并将它应用到一些实际例子。</li><li>建立我们自己的数据结构和算法（内存管理，模板等等）</li></ul><p>我介绍一些课题是：选择和迭代，字符串，函数，其他的数据结构（载体，字符串，地图等）文件的I/O和通用的算法，最后是用户自定义的Class。</p><h1 id="关于编码的规则"><a href="#关于编码的规则" class="headerlink" title="关于编码的规则"></a>关于编码的规则</h1><p>在这个过程中，我们将遵守一套约定关于我们如何在程序命名变量，函数和常量，我们如何缩进等。虽然编码规则往往是任意的，选择一个一致的组织。我们将选择使用<a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener">谷歌编码标准</a>，可以在那里寻找，并找到正确的标准答案。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://zh.cppreference.com/w/首页" target="_blank" rel="noopener">来自官方手册</a></p><p>C++ Primer中文译本（由于文件过大，需自行下载或<a href="https://liutiantian233.github.io/about/">联系我</a>）</p>]]></content>
    
    <summary type="html">
    
      这是一个用于CS专业的学生或有志于进行更深入地了解编程的人。开始通过引入C++语言和标准模板库STL，使用由C++11的标准添加最新的元件，并且移动到更先进的数据结构和算法工作。
    
    </summary>
    
      <category term="关于C++的学习手册" scheme="https://liutiantian233.github.io/categories/about-study-manual-C/"/>
    
    
      <category term="C++的开发和进度" scheme="https://liutiantian233.github.io/tags/C-development-and-progress/"/>
    
  </entry>
  
  <entry>
    <title>Mac的CPP环境最佳搭建方案</title>
    <link href="https://liutiantian233.github.io/tech/2019/01/mac-cpp-environment.html"/>
    <id>https://liutiantian233.github.io/tech/2019/01/mac-cpp-environment.html</id>
    <published>2019-01-18T02:41:05.000Z</published>
    <updated>2019-01-27T15:56:27.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重要-写在前面"><a href="#重要-写在前面" class="headerlink" title="重要 写在前面"></a>重要 写在前面</h1><p>我先介绍下：</p><ol><li>文本编辑器：就是写代码的东西，再直白点，记事本就是一种文本编辑器，此外还有著名的Sublime，Atom，Visual Studio，NodePad++，等等。</li><li>编译器：这个的作用就是把你之前用文本编辑器写的代码翻译成机器代码的一个程序。</li><li>连接器：将你写的代码翻译成二进制机器代码后，与系统提供的二进制库进行组合的程序，其结果是生成一个可执行的文件。因为基本所有代码都不是一个人做的，都是现在前人的成果上选出一部分进行再造。编译器和连接器通常是通常是一起的，常见的有VC/VC++，GCC/G++等等。</li><li>调试器：即对可执行的代码一点一点运行，然后把运行的信息显示出来，结合这些信息判断逻辑上哪里有错误，也就是俗称的Debug工具。</li><li>项目管理工具：一个管理程序项目的程序，比如源文件放哪，用什么语法级别，连接器可用的链接库放在哪等等。</li><li>集成开发环境（IDE）：这个东西就是把上面所有类型的工具选一些出来组合，然后再自己增加一些语法检查等人性化的功能，直接的效果就是有这个工具就能直接开发了。常见的有Eclipse，Visual Stdio，Clion等等。</li></ol><p>接下来就是如何进行一个开发了，<strong>有两种选择</strong>，一种是所有的工具都知道，每样选一个工具进行开发，比如Mac下，用Sublime写一段代码，GCC编译链接，然后执行。</p><p>当然如果不是很清楚，那就直接下载集成环境，按照提示写程序运行程序就可以了。</p><p><strong>新手推荐用IDE集成环境</strong></p><h1 id="关于各个IDE的测评和简单介绍"><a href="#关于各个IDE的测评和简单介绍" class="headerlink" title="关于各个IDE的测评和简单介绍"></a>关于各个IDE的测评和简单介绍</h1><p>因为新手最要紧的不是弄懂编程语言是怎么回事，编程应该怎么操作，只有在学习更加深入之后，回过头来再了解什么叫编译，什么叫链接，如何写出不用链接也能执行的代码，如何写出不用操作系统也能执行的代码等。</p><h2 id="关于IDE"><a href="#关于IDE" class="headerlink" title="关于IDE"></a>关于IDE</h2><ol><li>Visual Stdio：号称宇宙最强的C++集成环境，其实他已经不再是普通意义上的一种IDE了，而是一种平台，基本任何程序都可以在上面编写，还可以做商务智能，绘图，数据库管理等等一系列功能。目前只有Windows版本，虽然爆炸性的说有了Mac的预览版然后又匆匆删去，其实不抱有任何希望，毕竟和Windows贴合太紧密了！</li><li>Eclipse：用Java语言实现的IDE，跨平台，但是因为是建立在虚拟机上的，所以性能和外观有一定的败笔，其与Visual Stdio一样，是一个平台，有无数插件可以编写，一瞬间是Java的IDE，转瞬一变就是C和C++的IDE了，当然Python什么等等都可以。</li><li>Xcode：Mac下推荐Xcode，教程多，不用担心出错找不到怎么办。</li><li>Clion：这个是基于CMake构建的，但真的很好，我觉得是Mac的首选，我就一直在用这个。</li><li>CodeBlock：跨平台，但貌似很久不更新了。</li></ol><h1 id="使用Mac的终端搭建"><a href="#使用Mac的终端搭建" class="headerlink" title="使用Mac的终端搭建"></a>使用Mac的终端搭建</h1><ol><li>检查环境</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/mac-cpp-environment-1.png" alt=""></p><ol start="2"><li>编写源代码</li><li>编译链接代码</li><li>运行</li></ol><p>这是一个基本的运行流程，但不是很建议这样操作，对新手不是很友好。所以我推荐直接使用Clion的IDE进行搭建，有学生优惠，使用学校邮箱注册一个学生账号就能免费使用。Xcode的话虽然臃肿，但使用还是没问题的，而且又是Mac的亲儿子，你看，隔壁家的微软和VS，你侬我侬的。</p><h1 id="关于Clion"><a href="#关于Clion" class="headerlink" title="关于Clion"></a>关于Clion</h1><p>我真的真的必须强烈推荐，别跟我说什么新手不会用CMake。</p><p><strong>新建一个项目的时候哪里需要手动改CMakeLists文件？？？</strong></p><p><strong>新建一个Class也不会需要手动改CMakeLists文件！！！</strong></p><h1 id="总结与引用"><a href="#总结与引用" class="headerlink" title="总结与引用"></a>总结与引用</h1><p>对于任何初学语言和开发来说，集成的工具总是好的，实用性强，但如果使用单一软件会更利于产品兼容。各有千秋吧！</p><p><a href="https://www.zhihu.com/question/23677882/answer/131325334" target="_blank" rel="noopener">来自知乎的部分</a>部分参考</p>]]></content>
    
    <summary type="html">
    
      因为新学期的到来，Python这个小婊砸算是暂时打入冷宫，让她自闭一会，毕竟太能折腾。C++作为业界典范，上能通R语言，Go语言，下能打C语言和Java语言，行业老大哥。所以一切的开始，都得从最基本的搭建环境开始讲起！
    
    </summary>
    
      <category term="技术" scheme="https://liutiantian233.github.io/categories/tech/"/>
    
    
      <category term="产品技术测评" scheme="https://liutiantian233.github.io/tags/product-technology-evaluation/"/>
    
      <category term="Macbook Pro相关" scheme="https://liutiantian233.github.io/tags/Macbook-Pro-related/"/>
    
      <category term="C++的开发和进度" scheme="https://liutiantian233.github.io/tags/C-development-and-progress/"/>
    
  </entry>
  
  <entry>
    <title>关于Mac Touch ID失灵的原因和综合解决办法</title>
    <link href="https://liutiantian233.github.io/tech/2019/01/about-mac-touch-id-failure.html"/>
    <id>https://liutiantian233.github.io/tech/2019/01/about-mac-touch-id-failure.html</id>
    <published>2019-01-16T01:40:00.000Z</published>
    <updated>2019-01-17T03:12:55.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>如果你遇到 Mac OS 无法添加指纹的情况，这一般是会出现在 Macbook Pro 2018款或者更高版本的电脑（2016款带指纹的版本也可能会出现）这就是一篇关于形成这个Bug的原因和解决办法。</p><h2 id="解决之前"><a href="#解决之前" class="headerlink" title="解决之前"></a>解决之前</h2><p>作为一个专（dan）业（ten）的计算机痴迷用户，并且全身家当最贵的就是这个电脑。无数次被这个Bug怼得头皮发麻。尽管坐标美国，每次去联系学校的Apple Store，都是被热心的换了一台新的，而且每次都是单机带去，全新拿回来，我甚至都想天天换电脑了。但问题还是问题，解决还是得解决。</p><p>就目前从国内论坛和网站中，还没有关于这类问题的解决办法。天才吧也不例外。我不能说天才吧里没人知道，但至少这个办法没有被普及。在国外论坛浸泡了好久，终于还是找到了。</p><h1 id="这个Bug的形成原因"><a href="#这个Bug的形成原因" class="headerlink" title="这个Bug的形成原因"></a>这个Bug的形成原因</h1><p>我们先来解释一下Touch Bar的工作原理，就目前的Touch Bar来说，官方解释是这样的：</p><blockquote><p>The all-new Touch Bar revolutionizes the keyboard experience by bringing dynamic controls to your fingertips. This Multi-Touch Retina display at the top of the new MacBook Pro keyboard changes depending on what the user does in your app, so you can surface context-specific features and controls.</p></blockquote><p>解释的很笼统，让你觉得这个Bar是依附于Macbook的硬盘或者系统中，事实上，其存储器和运行解析器，都是单独运行的，与Mac OS的硬盘系统属于并列关系。互不干涉。这就导致了一个严重的问题：</p><blockquote><p>如果第一次电脑恢复出厂设置之前，没有清空Touch Bar内置存储器的信息，信息就会被残留，并且在新安装的电脑里，无法清理这个残留文件，且！！！存储器内存有上限，达到一定程度就无法继续添加。</p></blockquote><p>这样就明白很多了吧，如果你第一次开机录入了10个手指，并且指纹上限就是10个，如果你的电脑升级了系统，或者出现问题，恢复出厂设置，一旦步骤中需要你重新录入指纹，系统发现Touch Bar内存已经满了。就会跳过步骤，而且你也无法手动添加。</p><p><strong>就会导致你一直无法添加新的指纹！！！</strong></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>如果已经遇到了这个问题，那么解决办法如下：</p><ol><li><p>重新启动Mac并立即按住<code>command</code>+<code>R</code>键开机，进入恢复模式。</p></li><li><p>在<code>Mac实用工具</code>选项中，下拉<code>工具</code>菜单，选择终端。</p></li><li><p>在命令行输入以下命令，然后按回车：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xartutil --erase-all</span><br></pre></td></tr></table></figure><ol start="4"><li><p>当询问是否要继续时，输入<code>yes</code></p></li><li><p>点击  标志菜单并选择<code>重新启动</code>，和正常启动一样，之后重新进入恢复模式安装系统。</p></li></ol><p><img src="https://raw.githubusercontent.com/liutiantian233/Blog/master/201901/touch-bar-terminal.jpg" alt=""></p><p>如果你即将恢复出厂设置，如下操作可以避免日后出现问题：</p><ol><li>从  标志菜单打开系统偏好设置，然后选择Touch ID</li><li>删除当前所有指纹。</li></ol><p>或许你也可以试着重置 Mac 上的 NVRAM 或 PRAM 和 SMC 解决一些基本的问题。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我想这个问题形成的原因还是Touch Bar和系统之间没有做好调节导致的，但毕竟还是可以解决的。希望以后可以尽快改进吧。</p><p>或许我的描述没有让你更理解，请<a href="https://liutiantian233.github.io/about/">联系我</a>提供建议，我会给予你最大的帮助。</p><p>感谢你的阅读！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://osxdaily.com/2017/12/21/delete-touch-bar-data-mac/" target="_blank" rel="noopener">MacOS日常</a></p><p><a href="https://support.apple.com/zh-cn/HT204063" target="_blank" rel="noopener">重置 Mac 上的 NVRAM 或 PRAM</a></p><p><a href="https://support.apple.com/zh-cn/HT201295" target="_blank" rel="noopener">如何重置 Mac 上的系统管理控制器 (SMC)</a></p>]]></content>
    
    <summary type="html">
    
      Mac随着更新迭代的时间越来越快，其实用性的确在越来越强，但伴随着的是一堆如同Windows一般的严重又无法查明具体原因的Bug，这里详细讨论一下一个目前还没有在国内论坛和网站普及的Macbook Pro 2018款之后的版本出现的一个关于Touch ID的Bug。
    
    </summary>
    
      <category term="技术" scheme="https://liutiantian233.github.io/categories/tech/"/>
    
    
      <category term="产品技术测评" scheme="https://liutiantian233.github.io/tags/product-technology-evaluation/"/>
    
      <category term="Macbook Pro相关" scheme="https://liutiantian233.github.io/tags/Macbook-Pro-related/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+NexT搭建Blog开发手册与调试</title>
    <link href="https://liutiantian233.github.io/tech/2019/01/development-manual-and-debug.html"/>
    <id>https://liutiantian233.github.io/tech/2019/01/development-manual-and-debug.html</id>
    <published>2019-01-01T20:00:00.000Z</published>
    <updated>2019-01-16T23:47:53.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="必读-写在前面"><a href="#必读-写在前面" class="headerlink" title="必读 写在前面"></a>必读 写在前面</h1><p>基于<code>Hexo</code>模块化结构和<code>NexT</code>主题进行搭建的博客详细开发手册</p><p><strong>哥林多后书5章17节</strong></p><ul><li>若有人在基督里，他就是新造的人，旧事已过，都变成新的了。</li></ul><p>如果每一个超棒的想法都能汇聚在相应的小河之中，那么文明的大河将会迅速变成大海。一切都是从无到有，感谢互联网，让开源共享精神照耀了这个时代，让这个设想有了真正的可能。</p><p>本文就是一篇关于利用 GitHub Pages + Hexo + NexT 搭建个人博客的文章。</p><h2 id="重要的提示"><a href="#重要的提示" class="headerlink" title="重要的提示"></a>重要的提示</h2><p>站点配置文件和主题配置文件，名字都叫<code>_config.yml</code>需要仔细阅读分清楚。</p><ul><li><p>站点配置文件，位于站点文件夹根目录内：</p><p><code>/Users/onelai/Documents/Blog</code></p></li><li><p>主题配置文件，位于主题文件夹根目录内：</p><p><code>/Users/onelai/Documents/Blog/themes/next</code></p></li></ul><h2 id="我的搭建环境"><a href="#我的搭建环境" class="headerlink" title="我的搭建环境"></a>我的搭建环境</h2><p>因为不同的操作环境有着极其大的区别，搭建期间踩过很多雷，所以特别声明一下我的操作环境为：</p><ul><li>Mac OS High Sierra 10.13.6</li><li><a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a></li><li><a href="https://git-scm.com" target="_blank" rel="noopener">Git</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node</a></li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></li></ul><h1 id="开始-搭建博客"><a href="#开始-搭建博客" class="headerlink" title="开始 搭建博客"></a>开始 搭建博客</h1><p>基本环境的具体流程可以在<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener"><code>Hexo</code>官方手册</a>中找到，我的步骤是：</p><p><strong>打开系统自带终端标签页，安装<code>Homebrew</code>包管理模块，输入<code>brew</code>操作命令安装<code>Git</code>和<code>Node</code>包版本，最后使用<code>npm</code>命令安装<code>Hexo</code>最新版本。</strong></p><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><p>打开终端运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;开发手册与调试&quot;</span><br></pre></td></tr></table></figure><h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>使用<code>git</code>命令安装<code>NexT</code>开发主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h1 id="站点文件修改"><a href="#站点文件修改" class="headerlink" title="站点文件修改"></a>站点文件修改</h1><p>修改基本站点文件，博客根目录下的<code>_config.yml</code>文件。</p><h2 id="主页设计与作者名称"><a href="#主页设计与作者名称" class="headerlink" title="主页设计与作者名称"></a>主页设计与作者名称</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">TianTian的404私有库</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">一只有梦想会翻身的小咸鱼</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">一只有梦想会翻身的小咸鱼</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">TianTian</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure><h2 id="URL配置"><a href="#URL配置" class="headerlink" title="URL配置"></a>URL配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://liutiantian233.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:category/:year/:month/:title.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line">  <span class="string">技术:</span> <span class="string">tech</span></span><br><span class="line">  <span class="string">日常:</span> <span class="string">daily</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br></pre></td></tr></table></figure><h2 id="主页页数配置"><a href="#主页页数配置" class="headerlink" title="主页页数配置"></a>主页页数配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br></pre></td></tr></table></figure><h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h2 id="部署地址"><a href="#部署地址" class="headerlink" title="部署地址"></a>部署地址</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/liutiantian233/liutiantian233.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h1 id="更改Mist主题外观侧边栏"><a href="#更改Mist主题外观侧边栏" class="headerlink" title="更改Mist主题外观侧边栏"></a>更改<code>Mist</code>主题外观侧边栏</h1><h2 id="sidebar-styl文件"><a href="#sidebar-styl文件" class="headerlink" title="sidebar.styl文件"></a><code>sidebar.styl</code>文件</h2><p>路径<code>/themes/next/source/css/_common/components/sidebar</code></p><p>第三行<code>right</code>改为<code>left</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="sidebar-toggle-styl文件"><a href="#sidebar-toggle-styl文件" class="headerlink" title="sidebar-toggle.styl文件"></a><code>sidebar-toggle.styl</code>文件</h2><p>路径<code>/themes/next/source/css/_common/components/sidebar</code></p><p>第三行<code>right</code>改为<code>left</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">left</span>: <span class="variable">$b2t</span>-position-right;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">45px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14px</span>;</span><br></pre></td></tr></table></figure><h2 id="back-to-top-styl文件"><a href="#back-to-top-styl文件" class="headerlink" title="back-to-top.styl文件"></a><code>back-to-top.styl</code>文件</h2><p>路径<code>/themes/next/source/css/_common/components</code></p><p>第五行<code>right</code>改为<code>left</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="variable">$b2t</span>-position-bottom;</span><br><span class="line">  <span class="attribute">left</span>: <span class="variable">$b2t</span>-position-right;</span><br></pre></td></tr></table></figure><h2 id="motion-js文件"><a href="#motion-js文件" class="headerlink" title="motion.js文件"></a><code>motion.js</code>文件</h2><p>路径<code>/themes/next/source/js/src</code></p><p>将两处<code>paddingRight</code>改为<code>paddingLeft</code></p><h1 id="安装优化模块"><a href="#安装优化模块" class="headerlink" title="安装优化模块"></a>安装优化模块</h1><p>优化并搭载安装常用模块</p><h2 id="统计字数和阅读时间"><a href="#统计字数和阅读时间" class="headerlink" title="统计字数和阅读时间"></a><a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">统计字数和阅读时间</a></h2><p>在根目录下运行终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>在根目录下的<code>_config.yml</code>文件增加以下语句</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在<code>next</code>主题目录下的<code>_config.yml</code>文件修改以下语句</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">280</span></span><br></pre></td></tr></table></figure><h2 id="分享模块"><a href="#分享模块" class="headerlink" title="分享模块"></a><a href="https://github.com/theme-next/theme-next-needmoreshare2" target="_blank" rel="noopener">分享模块</a></h2><p>在<code>next</code>主题目录下运行终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-needmoreshare2 source/lib/needsharebutton</span><br></pre></td></tr></table></figure><p>在<code>next</code>主题目录下的<code>_config.yml</code>文件修改以下语句</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">needmoreshare2:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  postbottom:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  float:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="基础背景动画模块"><a href="#基础背景动画模块" class="headerlink" title="基础背景动画模块"></a><a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">基础背景动画模块</a></h2><p>在<code>next</code>主题目录下运行终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></table></figure><p>在<code>next</code>主题目录下的<code>_config.yml</code>文件修改以下语句</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line"><span class="attr">  color:</span> <span class="string">'0,0,255'</span> <span class="comment"># RGB values, use ',' to separate</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line"><span class="attr">  zIndex:</span> <span class="bullet">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">99</span> <span class="comment"># the number of lines</span></span><br></pre></td></tr></table></figure><h2 id="顶部阅读进度模块"><a href="#顶部阅读进度模块" class="headerlink" title="顶部阅读进度模块"></a><a href="https://github.com/theme-next/theme-next-reading-progress" target="_blank" rel="noopener">顶部阅读进度模块</a></h2><p>在<code>next</code>主题目录下运行终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-reading-progress source/lib/reading_progress</span><br></pre></td></tr></table></figure><p>在<code>next</code>主题目录下的<code>_config.yml</code>文件修改以下语句</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  color:</span> <span class="string">"#37c6c0"</span></span><br><span class="line"><span class="attr">  height:</span> <span class="number">3</span><span class="string">px</span></span><br></pre></td></tr></table></figure><h2 id="加载进度模块"><a href="#加载进度模块" class="headerlink" title="加载进度模块"></a><a href="https://github.com/theme-next/theme-next-pace" target="_blank" rel="noopener">加载进度模块</a></h2><p>在<code>next</code>主题目录下运行终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pace source/lib/pace</span><br></pre></td></tr></table></figure><p>在<code>next</code>主题目录下的<code>_config.yml</code>文件修改以下语句</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pace</span></span><br><span class="line"><span class="attr">pace:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Themes list:</span></span><br><span class="line"><span class="comment"># pace-theme-big-counter | pace-theme-bounce | pace-theme-barber-shop | pace-theme-center-atom</span></span><br><span class="line"><span class="comment"># pace-theme-center-circle | pace-theme-center-radar | pace-theme-center-simple | pace-theme-corner-indicator</span></span><br><span class="line"><span class="comment"># pace-theme-fill-left | pace-theme-flash | pace-theme-loading-bar | pace-theme-mac-osx | pace-theme-minimal</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment"># pace_theme: pace-theme-center-simple</span></span><br><span class="line"><span class="attr">pace_theme:</span> <span class="string">pace-theme-center-atom</span></span><br></pre></td></tr></table></figure><h2 id="安装RSS模块"><a href="#安装RSS模块" class="headerlink" title="安装RSS模块"></a>安装<code>RSS</code>模块</h2><p>在根目录下运行终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h1 id="调用内部模块"><a href="#调用内部模块" class="headerlink" title="调用内部模块"></a>调用内部模块</h1><p>已安装的模块程序，可直接被调用。</p><h2 id="修改主题模式"><a href="#修改主题模式" class="headerlink" title="修改主题模式"></a>修改主题模式</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><h2 id="菜单修改"><a href="#菜单修改" class="headerlink" title="菜单修改"></a>菜单修改</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><h2 id="外部网站链接"><a href="#外部网站链接" class="headerlink" title="外部网站链接"></a>外部网站链接</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/liutiantian233</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="string">邮箱:</span> <span class="attr">mailto:liutia20@msu.edu</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="string">微博:</span> <span class="attr">https://www.weibo.com/u/5912150206</span> <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line">  <span class="string">知乎:</span> <span class="attr">https://www.zhihu.com/people/wo-de-hei-yan-jing-60/activities</span></span><br><span class="line">  <span class="string">哔哩哔哩:</span> <span class="attr">https://space.bilibili.com/32160272</span></span><br></pre></td></tr></table></figure><h2 id="友情链接模块"><a href="#友情链接模块" class="headerlink" title="友情链接模块"></a>友情链接模块</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">友情跳转链接</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="comment">#links_layout: inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">千万互联:</span></span><br><span class="line">  <span class="string">孤独寂寞冷:</span></span><br><span class="line">  <span class="string">欢迎加入:</span></span><br></pre></td></tr></table></figure><h2 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">https://raw.githubusercontent.com/liutiantian233/Blog/master/head.png</span></span><br></pre></td></tr></table></figure><h2 id="左下角显示回到顶部和进度显示"><a href="#左下角显示回到顶部和进度显示" class="headerlink" title="左下角显示回到顶部和进度显示"></a>左下角显示回到顶部和进度显示</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line"><span class="attr">offset:</span> <span class="number">12</span></span><br><span class="line"><span class="comment"># Back to top in sidebar.</span></span><br><span class="line"><span class="attr">b2t:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Enable sidebar on narrow view (only for Muse | Mist).</span></span><br><span class="line"><span class="attr">onmobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="不蒜子统计模块"><a href="#不蒜子统计模块" class="headerlink" title="不蒜子统计模块"></a>不蒜子统计模块</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show Views/Visitors of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  total_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_views_icon:</span> <span class="string">eye</span></span><br><span class="line"><span class="attr">  post_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure><h2 id="修改建站时间"><a href="#修改建站时间" class="headerlink" title="修改建站时间"></a>修改建站时间</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line"><span class="attr">  since:</span> <span class="number">2018</span></span><br></pre></td></tr></table></figure><h2 id="添加版权声明"><a href="#添加版权声明" class="headerlink" title="添加版权声明"></a>添加版权声明</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">by-nc-sa</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  post:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="添加Follow-me-on-GitHub"><a href="#添加Follow-me-on-GitHub" class="headerlink" title="添加Follow me on GitHub"></a>添加<code>Follow me on GitHub</code></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Follow me on GitHub banner in right-top corner.</span></span><br><span class="line"><span class="comment"># Usage: `permalink || title`</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target permalink.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the title and aria-label name.</span></span><br><span class="line"><span class="attr">github_banner:</span> <span class="attr">https://github.com/liutiantian233</span> <span class="string">||</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure><h2 id="自动弹出左边栏"><a href="#自动弹出左边栏" class="headerlink" title="自动弹出左边栏"></a>自动弹出左边栏</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#display: post</span></span><br><span class="line"><span class="attr">display:</span> <span class="string">always</span></span><br><span class="line"><span class="comment">#display: hide</span></span><br><span class="line"><span class="comment">#display: remove</span></span><br></pre></td></tr></table></figure><h1 id="关于建站补充和Debug"><a href="#关于建站补充和Debug" class="headerlink" title="关于建站补充和Debug"></a>关于建站补充和Debug</h1><h2 id="添加关于页面"><a href="#添加关于页面" class="headerlink" title="添加关于页面"></a>添加关于页面</h2><p>在根目录下运行终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>修改<code>index.md</code>为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">关于</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-01</span><span class="bullet">-13</span> <span class="number">13</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"about"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="关于增加分类页"><a href="#关于增加分类页" class="headerlink" title="关于增加分类页"></a>关于增加分类页</h2><p>在根目录下运行终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>修改<code>index.md</code>为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-01</span><span class="bullet">-10</span> <span class="number">12</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="关于增加标签页"><a href="#关于增加标签页" class="headerlink" title="关于增加标签页"></a>关于增加标签页</h2><p>在根目录下运行终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>修改<code>index.md</code>为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-01</span><span class="bullet">-10</span> <span class="number">12</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>在根目录下运行终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><strong>后期测试中会逐步补充</strong></p><p><strong>关注本站持续更新</strong></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo中文官方手册</a></p><p><a href="https://github.com/theme-next" target="_blank" rel="noopener">NexT 6.0 官方GitHub库</a></p><p><a href="https://theme-next.iissnan.com" target="_blank" rel="noopener">NexT 5.0 系列官方手册</a></p>]]></content>
    
    <summary type="html">
    
      关于建站的详细流程笔记和开发手册，主要部分是Mist主题的侧边栏切换和各种模块的添加使用，之后会持续更新关于Debug与参考链接！
    
    </summary>
    
      <category term="技术" scheme="https://liutiantian233.github.io/categories/tech/"/>
    
    
      <category term="博客搭建" scheme="https://liutiantian233.github.io/tags/blog-building/"/>
    
      <category term="博客模块" scheme="https://liutiantian233.github.io/tags/blog-module/"/>
    
  </entry>
  
  <entry>
    <title>关于我的第一篇博客</title>
    <link href="https://liutiantian233.github.io/daily/2018/12/about-my-first-blog.html"/>
    <id>https://liutiantian233.github.io/daily/2018/12/about-my-first-blog.html</id>
    <published>2018-12-30T17:40:50.000Z</published>
    <updated>2019-01-20T17:54:14.267Z</updated>
    
    <summary type="html">
    
      这是我2018年底写的第一篇博客，很多想说的，想做的，都暂时写在这里吧，搭建这个博客起初的想法不过是一丝丝小小的兴趣。但当逐渐开始搭建的时候，才发现不是那么的简单，到目前，终于正式完成了，也算是一个打卡吧。
    
    </summary>
    
      <category term="日常" scheme="https://liutiantian233.github.io/categories/daily/"/>
    
    
      <category term="吐槽项" scheme="https://liutiantian233.github.io/tags/bb-for-bb/"/>
    
  </entry>
  
</feed>
